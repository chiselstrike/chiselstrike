// Test transforming <type>.cursor().filter() to SQL
// RUN: @chiselc @file -e Person

class Person extends Model {
  id: number;
  name: string;
  age: number;
}

const main = async () => {
  const people = await Person.cursor()
    .filter((p) => {
      return p.age > 4
    }).toArray();
};
// CHECK: const main = async ()=>{
// CHECK:     const people = await Person.cursor().__filterWithExpression((p)=>{
// CHECK:         return p.age > 4;
// CHECK:     }, {
// CHECK:         exprType: "Binary",
// CHECK:         left: {
// CHECK:             exprType: "Property",
// CHECK:             object: {
// CHECK:                 exprType: "Parameter",
// CHECK:                 position: 0
// CHECK:             },
// CHECK:             property: "age"
// CHECK:         },
// CHECK:         op: "Gt",
// CHECK:         right: {
// CHECK:             exprType: "Literal",
// CHECK:             value: 4
// CHECK:         }
// CHECK:     }).toArray();
// CHECK: };

const people = await Person.cursor()
  .filter((p) => {
    return p.age > 4
  }).toArray();
// CHECK: const people = await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return p.age > 4;
// CHECK: }, {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "age"
// CHECK:     },
// CHECK:     op: "Gt",
// CHECK:     right: {
// CHECK:         exprType: "Literal",
// CHECK:         value: 4
// CHECK:     }
// CHECK: }).toArray();

// The lambda has an expression statement so we should not transform it.
const people = await Person.cursor()
  .filter((p) => {
    p.age > 4;
  }).toArray();
// CHECK: const people = await Person.cursor().filter((p)=>{
// CHECK:     p.age > 4;
// CHECK: }).toArray();

await Person.cursor().filter((p) => { return p.age < 4 });
// CHECK: await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return p.age < 4;
// CHECK: }, {
// CHECK:    exprType: "Binary",
// CHECK:    left: {
// CHECK:        exprType: "Property",
// CHECK:        object: {
// CHECK:            exprType: "Parameter",
// CHECK:            position: 0
// CHECK:        },
// CHECK:        property: "age"
// CHECK:    },
// CHECK:    op: "Lt",
// CHECK:    right: {
// CHECK:        exprType: "Literal",
// CHECK:        value: 4
// CHECK:    }
// CHECK: });

await Person.cursor().filter((p) => { return p.age > 4 });
// CHECK: await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return p.age > 4;
// CHECK: }, {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "age"
// CHECK:     },
// CHECK:     op: "Gt",
// CHECK:     right: {
// CHECK:         exprType: "Literal",
// CHECK:         value: 4
// CHECK:     }
// CHECK: });

await Person.cursor().filter((p) => { return p.age <= 4 });
// CHECK: await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return p.age <= 4;
// CHECK: }, {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "age"
// CHECK:     },
// CHECK:     op: "LtEq",
// CHECK:     right: {
// CHECK:         exprType: "Literal",
// CHECK:         value: 4
// CHECK:     }
// CHECK: });

await Person.cursor().filter((p) => { return p.age != 4 });
// CHECK: await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return p.age != 4;
// CHECK: }, {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "age"
// CHECK:     },
// CHECK:     op: "NotEq",
// CHECK:     right: {
// CHECK:         exprType: "Literal",
// CHECK:         value: 4
// CHECK:     }
// CHECK: });

await Person.cursor().filter((p) => p.age < 4);
// CHECK: await Person.cursor().__filterWithExpression((p)=>p.age < 4
// CHECK: , {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "age"
// CHECK:     },
// CHECK:     op: "Lt",
// CHECK:     right: {
// CHECK:         exprType: "Literal",
// CHECK:         value: 4
// CHECK:     }
// CHECK: });

await Person.cursor().filter((p) => { return p.age < 4 || (p.age > 10 && p.age != 12) });
// CHECK: await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return p.age < 4 || (p.age > 10 && p.age != 12);
// CHECK: }, {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Binary",
// CHECK:         left: {
// CHECK:             exprType: "Property",
// CHECK:             object: {
// CHECK:                 exprType: "Parameter",
// CHECK:                 position: 0
// CHECK:             },
// CHECK:             property: "age"
// CHECK:         },
// CHECK:         op: "Lt",
// CHECK:         right: {
// CHECK:             exprType: "Literal",
// CHECK:             value: 4
// CHECK:         }
// CHECK:     },
// CHECK:     op: "Or",
// CHECK:     right: {
// CHECK:         exprType: "Binary",
// CHECK:         left: {
// CHECK:             exprType: "Binary",
// CHECK:             left: {
// CHECK:                 exprType: "Property",
// CHECK:                 object: {
// CHECK:                     exprType: "Parameter",
// CHECK:                     position: 0
// CHECK:                 },
// CHECK:                 property: "age"
// CHECK:             },
// CHECK:             op: "Gt",
// CHECK:             right: {
// CHECK:                 exprType: "Literal",
// CHECK:                 value: 10
// CHECK:             }
// CHECK:         },
// CHECK:         op: "And",
// CHECK:         right: {
// CHECK:             exprType: "Binary",
// CHECK:             left: {
// CHECK:                 exprType: "Property",
// CHECK:                 object: {
// CHECK:                     exprType: "Parameter",
// CHECK:                     position: 0
// CHECK:                 },
// CHECK:                 property: "age"
// CHECK:             },
// CHECK:             op: "NotEq",
// CHECK:             right: {
// CHECK:                 exprType: "Literal",
// CHECK:                 value: 12
// CHECK:             }
// CHECK:         }
// CHECK:     }
// CHECK: });

await Person.cursor().filter((p) => { return p.name == 'Alice' })
// CHECK: await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return p.name == 'Alice';
// CHECK: }, {
// CHECK:     exprType: "Binary",
// CHECK:     left: {
// CHECK:         exprType: "Property",
// CHECK:         object: {
// CHECK:             exprType: "Parameter",
// CHECK:             position: 0
// CHECK:         },
// CHECK:         property: "name"
// CHECK:     },
// CHECK:     op: "Eq",
// CHECK:     right: {
// CHECK:         exprType: "Literal",
// CHECK:         value: "Alice"
// CHECK:     }
// CHECK: });

function foo(p: Person) {
  return p.age < 4
}
await Person.cursor().filter((p) => { return foo(p) || (p.age > 10 && p.age != 12) })
// CHECK: function foo(p) {
// CHECK:     return p.age < 4;
// CHECK: }
// CHECK: await Person.cursor().filter((p)=>{
// CHECK:     return foo(p) || (p.age > 10 && p.age != 12);
// CHECK: });

await Person.cursor().filter(p => { return true; });
// CHECK: await Person.cursor().__filterWithExpression((p)=>{
// CHECK:     return true;
// CHECK: }, {
// CHECK:     exprType: "Literal",
// CHECK:     value: true
// CHECK: });

await Person.cursor().filter({});
// CHECK: await Person.cursor().filter({})
