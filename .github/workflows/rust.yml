name: Rust

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  POSTGRES_PASSWORD: postgres

jobs:
  build:
    runs-on: self-hosted
    container:
      image: ghcr.io/chiselstrike/rust-build-image:v1.2
      options: --user 1000
    steps:
    - name: checkout repo
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
          components: rustfmt, clippy

    - uses: actions/setup-node@v3
      with:
          node-version: 18

    - name: set up cache
      uses: Swatinem/rust-cache@v2

    - name: set up node cache
      uses: actions/cache@v3
      with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install node dependencies
      run: npm install

    - name: Cargo config
      run: |
          mkdir -p ~/.cargo
          cp scripts/cargo-config.toml ~/.cargo/config.toml

    - name: Build debug mode binaries
      uses: actions-rs/cargo@v1
      with:
          command: build
          args: --verbose

    - name: Build cli in isolation
      uses: actions-rs/cargo@v1
      with:
          command: build
          args: --verbose -p cli

    - name: Build server in isolation
      uses: actions-rs/cargo@v1
      with:
          command: build
          args: --verbose -p server

    - name: run unit tests
      uses: actions-rs/cargo@v1
      timeout-minutes: 20
      with:
          command: test

  postgres-test:
    runs-on: self-hosted
    container:
      image: ghcr.io/chiselstrike/rust-build-image:v1.2
      options: --user 1000
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: "$POSTGRES_PASSWORD"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
          components: rustfmt, clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Configure Node cache
      uses: actions/cache@v3
      with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install node dependencies
      run: npm install

    - name: Cargo config
      run: |
          mkdir -p ~/.cargo
          cp scripts/cargo-config.toml ~/.cargo/config.toml

    - name: Run integration tests against Postgres
      uses: actions-rs/cargo@v1
      timeout-minutes: 20
      with:
          command: test
          args: -p cli --test integration_tests -- --database postgres --database-user postgres --database-password "$POSTGRES_PASSWORD" --database-host postgres

  kafka-test:
    runs-on: self-hosted
    container:
      image: ghcr.io/chiselstrike/rust-build-image:v1.2
      options: --user 1000
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
          components: rustfmt, clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Configure Node cache
      uses: actions/cache@v3
      with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Cargo config
      run: |
          mkdir -p ~/.cargo
          cp scripts/cargo-config.toml ~/.cargo/config.toml

    - name: Setup Apache Kafka
      run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-8-jre-headless
          curl -O https://downloads.apache.org/kafka/3.2.3/kafka_2.12-3.2.3.tgz
          tar xf kafka_2.12-3.2.3.tgz
          ./kafka_2.12-3.2.3/bin/zookeeper-server-start.sh -daemon kafka_2.12-3.2.3/config/zookeeper.properties
          ./kafka_2.12-3.2.3/bin/kafka-server-start.sh -daemon kafka_2.12-3.2.3/config/server.properties

    - name: Run Kafka integration tests
      uses: actions-rs/cargo@v1
      timeout-minutes: 20
      with:
          command: test
          args: -p cli --test integration_tests -- --test kafka --kafka-connection localhost:9092
