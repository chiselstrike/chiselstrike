// SPDX-FileCopyrightText: Â© 2022 ChiselStrike <info@chiselstrike.com>

use crate::events::FileTopicMap;
use crate::routes::FileRouteMap;
use anyhow::{Context, Result};
use std::path::Path;

pub(crate) fn codegen_root_module(
    route_map: &FileRouteMap,
    topic_map: &FileTopicMap,
    import_fn: &dyn Fn(&Path) -> Result<String>,
) -> Result<String> {
    let mut lines = Vec::new();
    lines.push(format!("// this code is auto-generated by {}", file!()));
    lines.push("".into());
    codegen_route_map(&mut lines, route_map, import_fn)?;
    codegen_topic_map(&mut lines, topic_map, import_fn)?;
    Ok(lines.join("\n"))
}

fn codegen_route_map(
    lines: &mut Vec<String>,
    route_map: &FileRouteMap,
    import_fn: &dyn Fn(&Path) -> Result<String>,
) -> Result<()> {
    lines.push("import { RouteMap } from 'chisel://api/routing.ts';".into());
    lines.push("".into());

    lines.push("export const routeMap = new RouteMap();".into());

    for (i, route) in route_map.routes.iter().enumerate() {
        let import = import_fn(&route.file_path).with_context(|| {
            format!(
                "Cannot convert path of route {} to a JavaScript import",
                route.file_path.display()
            )
        })?;

        // TODO: we quote the `import` using fmt::Debug, but we should really quote it as a
        // JavaScript string
        lines.push(format!("import route{} from {:?};", i, import));

        let route_code = match route.legacy_file_name.as_ref() {
            // TODO: same as above, we should quote `legacy_file_name` properly
            Some(legacy_file_name) => {
                format!("RouteMap.convert(route{}, {:?})", i, legacy_file_name)
            }
            None => format!("RouteMap.convert(route{})", i),
        };

        // TODO: same as above, we should quote the `path_pattern` properly
        lines.push(format!(
            "routeMap.prefix({:?}, {});",
            route.path_pattern, route_code
        ));
    }
    lines.push("".into());

    Ok(())
}

fn codegen_topic_map(
    lines: &mut Vec<String>,
    topic_map: &FileTopicMap,
    import_fn: &dyn Fn(&Path) -> Result<String>,
) -> Result<()> {
    lines.push("import { TopicMap } from 'chisel://api/kafka.ts';".into());
    lines.push("".into());

    lines.push("export const topicMap = new TopicMap();".into());

    for (i, topic) in topic_map.topics.iter().enumerate() {
        let import = import_fn(&topic.file_path).with_context(|| {
            format!(
                "Cannot convert path of event handler {} to a JavaScript import",
                topic.file_path.display(),
            )
        })?;

        // TODO: same quotation issues as above
        lines.push(format!("import eventHandler{} from {:?}", i, import));
        lines.push(format!(
            "topicMap.topic({:?}, eventHandler{});",
            topic.topic, i
        ));
    }
    lines.push("".into());

    Ok(())
}
