# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cd "$TEMPDIR"
cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
    a: string = "";
}
EOF
$CHISEL apply
# CHECK: Applied:

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
     a: string = "";
     b: string = "with_default";
}
EOF
$CHISEL apply
# CHECK: Applied:

cat << EOF > "$TEMPDIR/routes/store.js"
import { Evolving } from "../models/types.ts";

export default async function chisel(req) {
   const obj = Evolving.build({'a': "A"});
   obj.b = "B";
   await obj.save();
   return new Response('ok');
}
EOF

cat << EOF > "$TEMPDIR/routes/find.js"
import { Evolving } from "../models/types.ts";

export default async function chisel(req) {
   let response = "tst ";
   for await (let ev of Evolving.cursor()) {
        let fields = [ev.a, ev.b];
        response += fields.join(" ");
        response += " ";
   }
   response += "tst";
   return new Response(response);
}
EOF

$CHISEL apply
# CHECK: Applied:

$CURL -X POST $CHISELD_HOST/dev/store
# CHECK: HTTP/1.1 200 OK

$CHISEL restart

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: tst A B tst

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
    a: string = "";
}
EOF
$CHISEL apply
# CHECK: Applied:

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: tst A  tst

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
    a: string = "";
    b: boolean = false;
}
EOF
$CHISEL apply
# CHECK: Applied:

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: tst A false tst
#
cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
    a: string = "";
    b: boolean = true;
}
EOF
$CHISEL apply
# CHECK: Applied:

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: tst A true tst

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
    a: string = "";
    b: boolean = true;
    c?: boolean;
}
EOF
$CHISEL apply
# CHECK: Applied:

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
    a: string = "";
    b: boolean = true;
}
EOF
$CHISEL apply
# CHECK: Applied:

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: tst A true tst


## Test field deletion with index

cat << EOF > "$TEMPDIR/routes/test_indexes.ts"
import { Evolving } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Evolving.cursor()
        .filter((e: Evolving) => {
            return e.a == "xx";
        });
    const results = (await filtered.toArray()).map(p => p.a);
    return new Response("[" + results.join(", ") + "]");
}
EOF

$CHISEL apply
# CHECK: Applied:


cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Evolving extends ChiselEntity {
    b: boolean = true;
}
EOF

rm $TEMPDIR/routes/test_indexes.ts

$CHISEL apply
# CHECK: Applied:

### get / set helpers for the tests below
cat << EOF > "$TEMPDIR/routes/get.ts"
import { Defaults } from "../models/defaults.ts";

export default async function chisel(req: Request) {
    return Defaults.findAll()
}
EOF

cat << EOF > "$TEMPDIR/routes/set.ts"
import { Defaults } from "../models/defaults.ts";

export default async function chisel(req: Request) {
    const x = Defaults.build();
    await x.save();
}
EOF

## Test able to use fields with complex defaults...
cat << EOF > "$TEMPDIR/models/defaults.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Defaults extends ChiselEntity {
    a: number  = "string".length
}
EOF

$CHISEL apply
# CHECK: Applied:

$CURL -d '{}' $CHISELD_HOST/dev/set
# CHECK: HTTP/1.1 200 OK

$CURL  $CHISELD_HOST/dev/get
# CHECK: "a": 6

## But not able to add other complex fields ...
cat << EOF > "$TEMPDIR/models/defaults.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Defaults extends ChiselEntity {
    a: number = "string".length
    b: string = JSON.stringify({a: "test2"});
}
EOF

$CHISEL apply 2>&1 || true
# CHECK: Error: unsafe to replace type

## ... unless they are optional!
## Also check that defaults can be whatever, including other models
cat << EOF > "$TEMPDIR/models/defaults.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Aux extends ChiselEntity {
    aux: string = "aux"
}

function myFunction() : string {
	return "funcreturn"
}

export class Defaults extends ChiselEntity {
    a: number = "string".length
    b?: string = JSON.stringify({a: "test2"});
    c?: string = myFunction()
    d?: Aux = new Aux()
}
EOF

$CHISEL apply
# CHECK: Applied:

$CURL -d '{}' $CHISELD_HOST/dev/set
# CHECK: HTTP/1.1 200 OK

$CURL  $CHISELD_HOST/dev/get
# CHECK: "a": 6
# CHECK: "b": "{\"a\":\"test2\"}"
# CHECK: "c": "funcreturn"
# CHECK: "d": {
# CHECK: "aux": "aux"
