# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/endpoints/test1.ts"
export default async function chisel(req: Request) {
    const getResources = () => {
        return Object.values(Deno.core.resources()).filter(x => x == "chisel_server::deno::BodyResource");
    };
    let res = getResources();
    if (res.length !== 1) {
        throw "Missing resource";
    }
    let body = await req.text();
    if (body != "foobar") {
       throw "Wrong body";
    }
    res = getResources();
    if (res.length !== 0) {
       throw "Body resource was not released";
    }
    return new Response("test1 is ok");
}
EOF

cat << EOF > "$TEMPDIR/endpoints/test2.ts"
export default async function chisel(req: Request) {
    const getResources = () => {
        return Object.values(Deno.core.resources()).filter(x => x == "chisel_server::deno::BodyResource");
    };
    let res = getResources();
    if (res.length !== 1) {
        throw "Missing resource";
    }
    await req.body!.cancel();
    res = getResources();
    if (res.length !== 0) {
       throw "Body resource was not released";
    }
    return new Response("test2 is ok");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

# CHECK: Code was applied

$CURL --data foobar -o - $CHISELD_HOST/dev/test1

echo

# CHECK: HTTP/1.1 200 OK
# CHECK: test1 is ok


$CURL --data foobar -o - $CHISELD_HOST/dev/test2

# CHECK: HTTP/1.1 200 OK
# CHECK: test2 is ok
