# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  @labels("L1") a: string;
  @labels("L2") b: number;
}
EOF

cd "$TEMPDIR"
$CHISEL apply
# CHECK: Code was applied

## Identical definition is OK.
$CHISEL apply
# CHECK: Code was applied

## Changing labels is OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string;
  @labels("L1") b: number;
}
EOF
$CHISEL apply
# CHECK: Code was applied

# Adding default values is OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  @labels("L1") b: number;
}
EOF
$CHISEL apply
# CHECK: Code was applied

## Two compatible definitions in different files are rejected.
cat << EOF > "$TEMPDIR/models/fooNoteADifferentFilenameHere.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  b: number;
}
EOF
$CHISEL apply 2>&1 || echo
# CHECK: Error: Model Foo defined twice
rm "$TEMPDIR/models/fooNoteADifferentFilenameHere.ts"

## Making completely arbitrary changes to Foo is okay, as long as there is no data
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string;
  b: string;
  c: number
}
EOF
$CHISEL apply
# CHECK: Code was applied

## Go back to the basics, and add some data
cat << EOF > "$TEMPDIR/models/foo.ts"
import { ChiselEntity } from "@chiselstrike/api"
export class Foo extends ChiselEntity {
  a: string = "foo";
  b: number;
}
EOF

cat << EOF > "$TEMPDIR/endpoints/seed.ts"
import { Foo } from "../models/foo.ts"
export default async function seed() {
    const c = Foo.build({"a": "seed", "b": 2})
    await c.save()
}
EOF

$CHISEL apply
# CHECK: Code was applied

$CURL -X POST $CHISELD_HOST/dev/seed
rm "$TEMPDIR/endpoints/seed.ts"

## Changing b's type is not OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  b: string;
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: unsafe to replace type: Foo

## Adding a field is not OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  b: number; 
  c: number;
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: unsafe to replace type: Foo

## Reordering fields is OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  b: number;
  a: string = "foo";
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: Code was applied

## Removing fields is OK if they previously had a default
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  b: number;
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: Code was applied

## clean up data.
rm "$TEMPDIR/models/foo.ts"
$CHISEL apply --allow-type-deletion

## Redefining elemental types is not OK.
echo 'export class number extends ChiselEntity { a: number}' > "$TEMPDIR/models/foo.ts"
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: custom type expected, got `number` instead

## Redefining AuthUser is not OK.
echo 'export class AuthUser extends ChiselEntity { a: number}' > "$TEMPDIR/models/foo.ts"
$CHISEL apply 2>&1 ||:
# CHECK: custom type expected, got `AuthUser` instead
