# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cp examples/person.ts "$TEMPDIR/models"
mkdir -p "$TEMPDIR/routes/a/b/c"
cp examples/find.ts "$TEMPDIR/routes"
cp examples/find.ts "$TEMPDIR/routes/a/b/c/findc1.ts"
cp examples/find.ts "$TEMPDIR/routes/a/b/c/findc2.ts"

echo "$(sed 's|../models/person.ts|../../../../models/person.ts|' "$TEMPDIR/routes/a/b/c/findc1.ts")" > "$TEMPDIR/routes/a/b/c/findc1.ts"
echo "$(sed 's|../models/person.ts|../../../../models/person.ts|' "$TEMPDIR/routes/a/b/c/findc2.ts")" > "$TEMPDIR/routes/a/b/c/findc2.ts"

cat << EOF > "$TEMPDIR/policies/pol.yaml"
routes:
  - path: /find
    users: .*
  - path: /a/b/c/findc1
    users: ^al$
  - path: /a/b
    users: ^a
EOF

cd "$TEMPDIR"
$CHISEL apply

echo '{ "CHISELD_AUTH_SECRET" : "dud" }' > ${TEMPDIR}/.env
$CHISEL restart
# CHECK: Server restarted successfully.
id_al=`$CURL -H ChiselAuth:dud -d '{"name":"Al", "email":"al"}' $CHISELD_HOST/__chiselstrike/auth/users|sed -ne 's/.*"id": "\(.*\)".$/\1/p'`
id_als=`$CURL -H ChiselAuth:dud -d '{"name":"Als", "email":"als"}' $CHISELD_HOST/__chiselstrike/auth/users|sed -ne 's/.*"id": "\(.*\)".$/\1/p'`

$CURL $CHISELD_HOST/find
# CHECK: HTTP/1.1 404 Not Found

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 403 Forbidden
$CHISEL restart

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 403 Forbidden

$CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/find # Carefully constructs a valid request without triggering lit command parsing.
# CHECK: HTTP/1.1 200 OK
$CURL -H ChiselUID\:invalid_id $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 403 Forbidden

$CURL $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H ChiselUID\:invalid_id $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 200 OK
$CURL -H ChiselUID\:$id_als $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 403 Forbidden

$CURL $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H ChiselUID\:invalid_id $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 200 OK
$CURL -H ChiselUID\:$id_als $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 200 OK

cat << EOF > "$TEMPDIR/policies/pol.yaml"
routes:
  - path: /find
    users: .*
  - path: /find
    users: ^als$
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: Error: Repeated path in user authorization: "/find"
rm "$TEMPDIR/policies/pol.yaml"

cat << EOF > "$TEMPDIR/models/post.ts"
import { ChiselEntity, AuthUser, labels } from '@chiselstrike/api'
export class Post extends ChiselEntity {
    text: string = "Lorem Ipsum";
    @labels("protect") author: AuthUser;
}
export class Blog extends ChiselEntity {
  post1?: Post;
}
EOF

cat << EOF > "$TEMPDIR/routes/po.ts"
import { Post } from '../models/post.ts';
import { loggedInUser, responseFromJson } from '@chiselstrike/api';
export default async function (req: Request) {
    if (req.method == 'POST') {
        let p = Post.build(await req.json());
        let author = await loggedInUser();
        if (author === undefined) return responseFromJson('Must be logged in', 401);
        p.author = author;
        await p.save();
        return new Response('saved post successfully');
    } else if (req.method == 'GET') {
        let r: Array<Pick<Post, "text">> = [];
        await Post.cursor().select('text').forEach(p => r.push(p));
        return responseFromJson(r);
    }
}
EOF

$CHISEL apply --allow-type-deletion
# CHECK: Applied:

$CURL -H ChiselUID\:$id_al -d '{"text": "first post by al"}' $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
$CURL -H ChiselUID\:$id_als -d '{"text": "first post by als"}' $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
$CURL -H ChiselUID\:$id_al -d '{"text": "second post by al"}' $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
$CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
# CHECK: "text": "first post by al"
# CHECK: "text": "first post by als"
# CHECK: "text": "second post by al"

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: protect
    transform: match_login
EOF
$CHISEL apply
count=$($CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/po | grep text | wc -l | tr -d '[:space:]')
echo "result count:$count"
# CHECK: result count:2
$CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
# CHECK: "text": "first post by al"
# CHECK: "text": "second post by al"

cat << EOF > "$TEMPDIR/routes/blogs.ts"
import { Blog, Post } from '../models/post.ts';
import { loggedInUser, responseFromJson } from '@chiselstrike/api';
export default async function chisel(req: Request) {
    if (req.method == 'POST') {
        const b = Blog.build(await req.json());
        const author = await loggedInUser();
        if (author === undefined) return responseFromJson('Must be logged in', 401);
        b.post1!.author = author;
        await b.save();
        return new Response('saved post successfully');
    } else if (req.method == 'GET') {
        const r = (await Blog.cursor().toArray()).map(b => b.post1!.text);
        return responseFromJson(r);
    }
}
EOF

rm "$TEMPDIR/policies/pol.yaml"
$CHISEL apply
# CHECK: Applied:

$CURL -d '{"text": "first post by al"}' $CHISELD_HOST/dev/po
# CHECK:  HTTP/1.1 401 Unauthorized
# CHECK:  Must be logged in

$CURL -d '{"text": "first post by al"}' $CHISELD_HOST/dev/blogs
# CHECK:  HTTP/1.1 401 Unauthorized
# CHECK:  Must be logged in

$CURL -H ChiselUID\:$id_al -d '{
  "post1": {"text": "first blog post by al"}
}' $CHISELD_HOST/dev/blogs
# CHECK: HTTP/1.1 200 OK
# CHECK: saved post successfully

$CURL -H ChiselUID\:$id_als -d '{
  "post1": {"text": "first blog post by als"}
}' $CHISELD_HOST/dev/blogs
# CHECK: HTTP/1.1 200 OK
# CHECK: saved post successfully

$CURL -H ChiselUID\:$id_al -d '{
  "post1": {"text": "second blog post by al"}
}' $CHISELD_HOST/dev/blogs
# CHECK: HTTP/1.1 200 OK
# CHECK: saved post successfully

$CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/blogs
# CHECK: HTTP/1.1 200 OK
# CHECK: "first blog post by al"
# CHECK: "first blog post by als"
# CHECK: "second blog post by al"

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: protect
    transform: match_login
EOF
$CHISEL apply
# CHECK: Applied:

count=$($CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/blogs | grep 'blog post by' | wc -l | tr -d '[:space:]')
echo "result count:$count"
# CHECK: result count:2
$CURL -H ChiselUID\:$id_al $CHISELD_HOST/dev/blogs
# CHECK: HTTP/1.1 200 OK
# CHECK: "first blog post by al"
# CHECK: "second blog post by al"
