# SPDX-FileCopyrightText: Â© 2022 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from '@chiselstrike/api';
export class Person extends ChiselEntity {
    firstName: string = "";
}
export class Company extends ChiselEntity {
    ceo: Person;
}
EOF

cd "$TEMPDIR"
$CHISEL apply 2>&1
# CHECK: Warning: Entity `Company` contains field `ceo` of entity type `Person` which is not default-initialized.


cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from '@chiselstrike/api';
export class Person extends ChiselEntity {
    firstName: string = "";
    lastName: string = "";
}
export class Company extends ChiselEntity {
    name: string = "";
    ceo: Person = new Person();
}
EOF

cat << EOF > "$TEMPDIR/endpoints/store_adalbrecht.ts"
import { Company, Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    let ceo = new Person();
    ceo.firstName = "This will be overwritten later";
    ceo.lastName = "Neuer";

    let company = new Company();
    company.name = "This is also going to be overwritten later";
    company.ceo = ceo;

    await company.save();

    // The point of this is to test that the second save will not
    // create second instances of our objects in the database. It
    // should update the original entries instead.
    company.name = "Bananas inc.";
    ceo.firstName = "Adalbrecht";
    await company.save();

    return new Response('Successfully stored data');
}
EOF

cat << EOF > "$TEMPDIR/endpoints/query_people.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const results = (await Person.cursor().sortBy("lastName").toArray())
        .map(p => {
            return "(" + p.firstName + ", " + p.lastName + ")";
        });
    return new Response("[" + results.join(", ") + "]");
}
EOF

cat << EOF > "$TEMPDIR/endpoints/query_companies.ts"
import { Company } from "../models/types.ts";

export default async function chisel(req: Request) {
    const results: string[] = [];
    for await (let company of Company.cursor()) {
        if (company.ceo) {
            results.push("(" + company.name + ", " + company.ceo.firstName + ")");
        }
    }
    return new Response("[" + results.join(", ") + "]");
}
EOF

$CHISEL apply

# CHECK: Model defined: Person
# CHECK: Model defined: Company
# CHECK: End point defined: /dev/query_companies
# CHECK: End point defined: /dev/query_people
# CHECK: End point defined: /dev/store_adalbrecht

$CURL -X POST $CHISELD_HOST/dev/store_adalbrecht
# CHECK: Successfully stored data

$CURL -o - $CHISELD_HOST/dev/query_people
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Adalbrecht, Neuer)]

$CURL -o - $CHISELD_HOST/dev/query_companies
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Bananas inc., Adalbrecht)]



## Test find + update

cat << EOF > "$TEMPDIR/endpoints/update.ts"
import { Company, Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const company = await Company.findOne({"name": "Bananas inc."})
    company!.ceo!.lastName = "Someone completely different";

    await company!.save();

    return new Response('Successfully updated');
}
EOF

$CHISEL apply

$CURL -X POST $CHISELD_HOST/dev/update
# CHECK: Successfully updated

$CURL -o - $CHISELD_HOST/dev/query_people
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Adalbrecht, Someone completely different)]



## Try saving the inner entity

cat << EOF > "$TEMPDIR/endpoints/update.ts"
import { Company, Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const company = await Company.findOne({"name": "Bananas inc."})
    company!.ceo.lastName = "Bond";

    await company!.ceo.save();

    return new Response('Successfully updated');
}
EOF

$CHISEL apply

$CURL -X POST $CHISELD_HOST/dev/update
# CHECK: Successfully updated

$CURL -o - $CHISELD_HOST/dev/query_people
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Adalbrecht, Bond)]


## Try saving created entity

cat << EOF > "$TEMPDIR/endpoints/update.ts"
import { Company, Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const company = await Company.create({
        name: "Black Books",
        ceo: {
            firstName: "Bernard",
            lastName: "Black"
        }
    });
    company.ceo.firstName = "Many";
    company.ceo.lastName = "Bianco";
    await company.ceo.save();

    return new Response('Successfully updated');
}
EOF

$CHISEL apply

$CURL -X POST $CHISELD_HOST/dev/update
# CHECK: Successfully updated

$CURL -o - $CHISELD_HOST/dev/query_people
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Many, Bianco), (Adalbrecht, Bond)]

cat << EOF > "$TEMPDIR/endpoints/update.ts"
import { Company, Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const company = Company.build({
        name: "Crimson Permanent Assurance",
        ceo: Person.build({
            firstName: "Sydney",
            lastName: "Arnold"
        })
    });
    await company.save();

    company.ceo.firstName = "Myrtle";
    company.ceo.lastName = "Devenish";
    await company.ceo.save();

    return new Response('Successfully updated');
}
EOF

$CHISEL apply

$CURL -X POST $CHISELD_HOST/dev/update
# CHECK: Successfully updated

$CURL -o - $CHISELD_HOST/dev/query_people
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Many, Bianco), (Adalbrecht, Bond), (Myrtle, Devenish)]
