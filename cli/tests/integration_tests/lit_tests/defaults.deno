# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cd "$TEMPDIR"
## check that unary expressions as defaults are valid
cat << EOF > "$TEMPDIR/models/types.ts"
export class Unary extends ChiselEntity { a: number = +1; b: number = 0; c: number = -1 ;}
EOF
$CHISEL apply
# CHECK: Code was applied

$CHISEL restart
$CHISEL describe

# CHECK: class Unary {
# CHECK: a: number = +1;
# CHECK: b: number = 0;
# CHECK: c: number = -1;
# CHECK: }

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from '@chiselstrike/api';
export class Foo extends ChiselEntity {
	a: string = "dfl1";
	b: number = 0.0;
	c: boolean = false;
	d: number = 2;
	e: string = "dfl2";
}
EOF

cat << EOF > "$TEMPDIR/endpoints/default.ts"
import { Foo } from "../models/types.ts";

export default async function chisel(req: Request) {
    const foo = new Foo();
    foo.e = "value";
    await foo.save();
    return new Response('ok');
}
EOF

cat << EOF > "$TEMPDIR/endpoints/read.ts"
import { Foo } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "";
    for await (let f of Foo.cursor()) {
        let fields = [f.a, f.b, f.c, f.d, f.e];
        response += fields.join(" ");
        response += " ";
    }
    return new Response(response);
}
EOF

$CHISEL apply --allow-type-deletion

$CURL -X POST $CHISELD_HOST/dev/default
# CHECK: HTTP/1.1 200 OK

$CURL -o - $CHISELD_HOST/dev/read
# CHECK: HTTP/1.1 200 OK
# CHECK: dfl1 0 false 2 value

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from '@chiselstrike/api';
export class Foo extends ChiselEntity {
	a: string = "dfl1";
	b: number = 0.0;
	c: boolean = false;
	d: number = 2;
	e: string = "dfl2";
	nfs: string = "oldval";
	nfb: number = 2;
	nfn: number = 2.2;
    strNoTy = "strNoType";
    boolNoTy = false;
    numNoTyInt = 3;
    numNoTyFloat = 3.3;
}
EOF

cat << EOF > "$TEMPDIR/endpoints/readold.ts"
import { Foo } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "";
    for await (let f of Foo.cursor()) {
        const fields = [
            f.a, f.b, f.c, f.d, f.e, f.nfs, f.nfb, f.nfn,
            f.strNoTy, f.boolNoTy, f.numNoTyInt, f.numNoTyFloat
        ];
        response += fields.join(" ");
        response += " ";
    }
    return new Response(response);
}
EOF

cat << EOF > "$TEMPDIR/endpoints/crud_foo.ts"
import { Foo } from "../models/types.ts";
export default Foo.crud();
EOF

cd "$TEMPDIR"
$CHISEL apply
# CHECK: Code was applied


$CURL -o - $CHISELD_HOST/dev/readold
$CURL -o - $CHISELD_HOST/dev/crud_foo
# CHECK: HTTP/1.1 200 OK
# CHECK: dfl1 0 false 2 value oldval 2 2.2 strNoType false 3 3.3


count_results () {
    results=$(cat)
    printf '%s' "$results" \
        | grep -o "\"a\":" \
        | wc -l \
        | xargs printf 'Number of results: %d\n';
    printf '%s' "$results";
}

$CURL "$CHISELD_HOST/dev/crud_foo?.a=xxx" | count_results
# CHECK: Number of results: 0

$CURL "$CHISELD_HOST/dev/crud_foo?.a=dfl1" | count_results
# CHECK: Number of results: 1
# CHECK: "a": "dfl1"

$CURL "$CHISELD_HOST/dev/crud_foo?.b=0.1" | count_results
# CHECK: Number of results: 0

$CURL "$CHISELD_HOST/dev/crud_foo?.b=0.0" | count_results
# CHECK: Number of results: 1
# CHECK: "a": "dfl1"

$CURL "$CHISELD_HOST/dev/crud_foo?.c=true" | count_results
# CHECK: Number of results: 0

$CURL "$CHISELD_HOST/dev/crud_foo?.c=false" | count_results
# CHECK: Number of results: 1
# CHECK: "a": "dfl1"

$CURL "$CHISELD_HOST/dev/crud_foo?.d=1" | count_results
# CHECK: Number of results: 0

$CURL "$CHISELD_HOST/dev/crud_foo?.d=2" | count_results
# CHECK: Number of results: 1
# CHECK: "a": "dfl1"


cat << EOF > "$TEMPDIR/endpoints/find_many.ts"
import { responseFromJson } from "@chiselstrike/api";
import { Foo } from "../models/types.ts";

export default async function chisel(req: Request) {
    const url = new URL(req.url);
    const key = url.searchParams.get("key")!;
    const value = url.searchParams.get("value")!;
    const filter = {[key]: value} as Partial<Foo>;
    const results = await Foo.findMany(filter);
    return responseFromJson(results);
}
EOF

cd "$TEMPDIR"
$CHISEL apply
# CHECK: Code was applied

$CURL -o - "$CHISELD_HOST/dev/find_many?key=a&value=xaxa" | count_results
# CHECK: Number of results: 0

$CURL -o - "$CHISELD_HOST/dev/find_many?key=a&value=dfl1" | count_results
# CHECK: Number of results: 1
# CHECK: "a": "dfl1"

$CURL -o - "$CHISELD_HOST/dev/find_many?key=nfs&value=xaxa" | count_results
# CHECK: Number of results: 0

$CURL -o - "$CHISELD_HOST/dev/find_many?key=nfs&value=oldval" | count_results
# CHECK: Number of results: 1
# CHECK: "nfs": "oldval"
