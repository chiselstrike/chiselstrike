# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cp examples/person.ts "$TEMPDIR/models"
mkdir -p "$TEMPDIR/endpoints/a/b/c"
cp examples/find.js "$TEMPDIR/endpoints"
cp examples/find.js "$TEMPDIR/endpoints/a/b/c/findc1.js"
cp examples/find.js "$TEMPDIR/endpoints/a/b/c/findc2.js"
cat << EOF > "$TEMPDIR/policies/pol.yaml"
endpoints:
  - path: /find
    users: .*
  - path: /a/b/c/findc1
    users: ^al$
  - path: /a/b
    users: ^a
EOF

cd "$TEMPDIR"
$CHISEL apply

token_al=`$CURL -s $CHISELD_HOST/__chiselstrike/auth/callback?user=al|sed -ne "s/.*chiselstrike_token=//" -e "s/<.*//p"`
token_als=`$CURL -s $CHISELD_HOST/__chiselstrike/auth/callback?user=als|sed -ne "s/.*chiselstrike_token=//" -e "s/<.*//p"`

$CURL $CHISELD_HOST/find
# CHECK: HTTP/1.1 404 Not Found

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 403 Forbidden
$CHISEL restart

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 403 Forbidden

$CURL -H "ChiselStrikeToken:$token_al" $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
$CURL -H "ChiselStrikeToken:invalid_token" $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 403 Forbidden

$CURL $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H "ChiselStrikeToken:invalid_token" $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H "ChiselStrikeToken:$token_al" $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 200 OK
$CURL -H "ChiselStrikeToken:$token_als" $CHISELD_HOST/dev/a/b/c/findc1
# CHECK: HTTP/1.1 403 Forbidden

$CURL $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H "ChiselStrikeToken:invalid_token" $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 403 Forbidden
$CURL -H "ChiselStrikeToken:$token_al" $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 200 OK
$CURL -H "ChiselStrikeToken:$token_als" $CHISELD_HOST/dev/a/b/c/findc2
# CHECK: HTTP/1.1 200 OK

cat << EOF > "$TEMPDIR/policies/pol.yaml"
endpoints:
  - path: /find
    users: .*
  - path: /find
    users: ^als$
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: Error: Repeated path in user authorization: "/find"
rm "$TEMPDIR/policies/pol.yaml"

cat << EOF > "$TEMPDIR/models/post.ts"
import { ChiselEntity, OAuthUser } from '@chiselstrike/api'
export class Post extends ChiselEntity {
    text: string = "Lorem Ipsum";
    @labels("protect") author: OAuthUser;
}
EOF

# FIXME, This should be po.ts once we can import labels in post.ts
cat << EOF > "$TEMPDIR/endpoints/po.js"
import { Post } from '../models/post.ts';
import { loggedInUser, responseFromJson } from '@chiselstrike/api';
export default async function chisel(req: Request) {
    if (req.method == 'POST') {
        let p = Post.build(await req.json());
        let author = await loggedInUser();
        if (author == null) return responseFromJson('Must be logged in', 401);
        p.author = author;
        await p.save();
        return new Response('saved post successfully');
    } else if (req.method == 'GET') {
        let r: Array<Post> = [];
        await Post.cursor().select('text').forEach(p => r.push(p));
        return responseFromJson(r);
    }
}
EOF

$CHISEL apply
$CURL -H "ChiselStrikeToken:$token_al" -d '{"text": "first post by al"}' $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
$CURL -H "ChiselStrikeToken:$token_als" -d '{"text": "first post by als"}' $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
$CURL -H "ChiselStrikeToken:$token_al" -d '{"text": "second post by al"}' $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
$CURL -H "ChiselStrikeToken:$token_al" $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
# CHECK: [{"text":"first post by al"},{"text":"first post by als"},{"text":"second post by al"}]

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: protect
    transform: match_login
EOF
$CHISEL apply
$CURL -H "ChiselStrikeToken:$token_al" $CHISELD_HOST/dev/po
# CHECK: HTTP/1.1 200 OK
# CHECK: [{"text":"first post by al"},{"text":"second post by al"}]
