# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cp examples/person.ts "$TEMPDIR/models"
cp examples/store.ts "$TEMPDIR/endpoints"

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: pii
    transform: anonymize
EOF

cat << EOF > "$TEMPDIR/models/nickname.ts"
import { ChiselEntity } from "@chiselstrike/api";

export class Nickname extends ChiselEntity {
   first_name: string = "";
   nick: string = "";
}
EOF

cat << EOF > "$TEMPDIR/endpoints/store_nick.js"
export default async function chisel(req: Request) {
    const nick = new Nickname();
    nick.first_name = "Glauber";
    nick.nick = "Glommer";
    await nick.save();
    return new Response('ok');
}
EOF

cat << EOF > "$TEMPDIR/endpoints/query.ts"
import { Person } from "../models/person.ts";
import { Nickname } from "../models/nickname.ts";

export default async function chisel(req: Request) {
    let ret = "[";
    const glaubers = Person.cursor().filter({"first_name": "Glauber"}).join(Nickname.cursor());
    const rows = glaubers.select("first_name", "nick", "last_name");
    for await (let row of rows) {
        ret += "(" + row.first_name + " " + row.nick + " " + row.last_name + ") ";
    }
    return new Response(ret + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

# CHECK: Model defined: Nickname
# CHECK: Model defined: Person
# CHECK: End point defined: /dev/query
# CHECK: End point defined: /dev/store
# CHECK: End point defined: /dev/store_nick
# CHECK: Policy defined for label pii

$CURL --data '{
    "first_name":"Glauber",
    "last_name":"Costa",
    "age": 666,
    "human": true,
    "height": 10.01
}' -o - $CHISELD_HOST/dev/store

# CHECK: ok

$CURL -X POST $CHISELD_HOST/dev/store_nick

# CHECK: ok

$CURL -o - $CHISELD_HOST/dev/query
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Glauber Glommer xxxxx) ]
