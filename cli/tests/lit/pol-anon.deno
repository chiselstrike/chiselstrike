# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cp examples/person.ts "$TEMPDIR/models"
cp examples/store.ts "$TEMPDIR/endpoints/ins.ts"
cp examples/find.ts "$TEMPDIR/endpoints/"

cd "$TEMPDIR"
$CHISEL apply

# CHECK: Model defined: Person
# CHECK: End point defined: /dev/find
# CHECK: End point defined: /dev/ins

$CURL --data '{
    "first_name":"hello",
    "last_name":"world",
    "age": 2147483647,
    "human": false,
    "height": 12742333
}' -o - $CHISELD_HOST/dev/ins

# CHECK: ok

$CURL -o - $CHISELD_HOST/dev/find

# CHECK: HTTP/1.1 200 OK
# CHECK: hello world 2147483647 false 12742333

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: pii
    transform: anonymize
EOF
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/find

# CHECK: HTTP/1.1 200 OK
# CHECK: hello xxxxx

cat << EOF > "$TEMPDIR/models/person.ts"
import { labels } from "@chiselstrike/api";

export class Person extends Chisel.ChiselEntity {
  @labels("L1", "L2", "L3") first_name: string;
  @labels("pii", "L2") last_name: string;
  @labels("L1", "L3") human: boolean;
  age: number;
  height: number;
}
EOF
$CHISEL apply --allow-type-deletion

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: Linf
    transform: anonymize
  - name: L1
  - name: L2
    transform: anonymize
EOF
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/find

# CHECK: HTTP/1.1 200 OK
# CHECK: xxxxx xxxxx

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: L2
    transform: anonymize
    except_uri: find
EOF
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: hello world

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: L2
    transform: anonymize
    except_uri: d$
EOF
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: hello world

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: L2
    transform: anonymize
    except_uri: ^no_match
EOF
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: xxxxx xxxxx



## Test anonymization of related entities.

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: pii
    transform: anonymize
EOF

cat << EOF > "$TEMPDIR/models/company.ts"
import { labels } from "@chiselstrike/api";

export class Human extends Chisel.ChiselEntity {
  @labels("pii") firstName: string = "";
  lastName: string = "";
}
export class Company extends Chisel.ChiselEntity {
  name: string = "";
  ceo: Human;
  @labels("pii") accountant: Human;
  @labels("pii") secretSauce: string = "AAAA";
}
EOF

cat << EOF > "$TEMPDIR/endpoints/companies.ts"
import { crud } from "@chiselstrike/api";
import { Company } from "../models/company.ts";

export default Company.crud();
EOF

$CHISEL apply

$CURL --no-include -d '{
  "name": "Chiselstrike",
  "ceo": {"firstName": "Glauber", "lastName": "Costa"},
  "accountant": {"firstName": "Edward", "lastName": "Ohare"},
  "secretSauce": "pumpkin"
}' $CHISELD_HOST/dev/companies | jq '.name'

# CHECK: Chiselstrike

$CURL --no-include $CHISELD_HOST/dev/companies | jq '.results | .[] | .name, .ceo.firstName, .ceo.lastName, .accountant, .secretSauce'

# CHECK: Chiselstrike
# CHECK: xxxxx
# CHECK: Costa
# CHECK: xxxxx
# CHECK: xxxxx
