# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cp examples/person.ts "$TEMPDIR/models"
cp examples/store.js "$TEMPDIR/endpoints"

cd "$TEMPDIR"
$CHISEL apply

# CHECK: Model defined: Person
# CHECK: End point defined: /dev/store

$CURL --data '{
    "first_name":"Glauber",
    "last_name":"Costa",
    "age": 666,
    "human": true,
    "height": 10.01
}' -o - $CHISELD_HOST/dev/store

# CHECK: ok

$CURL --data '{
    "first_name":"notGlauber",
    "last_name":"notCosta",
    "age": 666,
    "human": false,
    "height": 10.01
}' -o - $CHISELD_HOST/dev/store

cat << EOF > "$TEMPDIR/endpoints/query.ts"
import { Person } from "../models/person.ts";

export default async function chisel(req: Request) {
    const url = new URL(req.url);
    const first_name = url.searchParams.get("first_name") ?? undefined;
    const filtered = Person.cursor().filter({first_name});
    let ret = "[";
    for await (let row of filtered) {
        ret += row.last_name;
    }
    ret += "]";
    return new Response(ret);
}
EOF

$CHISEL apply
$CURL -o - $CHISELD_HOST/dev/query?first_name="Glauber"
# CHECK: [Costa]
$CURL -o - $CHISELD_HOST/dev/query?first_name="123"
# CHECK: []
## filter with undefined values
$CURL -o - $CHISELD_HOST/dev/query
# CHECK: [CostanotCosta]

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: pii
    transform: anonymize
EOF

$CHISEL apply
$CURL -o - $CHISELD_HOST/dev/query?first_name="Glauber"
# CHECK: [xxxxx]
$CURL -o - $CHISELD_HOST/dev/query?first_name="123"
# CHECK: []
## filter with undefined values, in the presence of policies
$CURL -o - $CHISELD_HOST/dev/query
# CHECK: [xxxxxxxxxx]


## Test take and filter permutability

cat << EOF > "$TEMPDIR/models/post.ts"
import { ChiselEntity } from "@chiselstrike/api";
export class Post extends ChiselEntity {
    a: string = "";
    b: number = 0;
}
EOF

cat << EOF > "$TEMPDIR/endpoints/take_filter.ts"
import { responseFromJson } from "@chiselstrike/api"
import { Post } from '../models/post.ts';

export default async (req: Request) => {
    await Post.build({ a: "x", b: 1 }).save();
    await Post.build({ a: "y", b: 2 }).save();
    await Post.build({ a: "z", b: 3 }).save();

    const simple_take = (await Post.cursor()
        .take(1)
        .toArray())
        .map(p => [p.a, p.b]);
    const take_filter = (await Post.cursor()
        .take(1)
        .filter({ a: "z" })
        .toArray())
        .map(p => [p.a, p.b]);
    const filter_take = (await Post.cursor()
        .filter({ a: "z" })
        .take(1)
        .toArray())
        .map(p => [p.a, p.b]);
    return responseFromJson({
        simple_take: simple_take[0],
        take_filter: take_filter[0],
        filter_take: filter_take[0]
    });
}
EOF
$CHISEL apply
# CHECK: Model defined: Post
# CHECK: End point defined: /dev/take_filter

$CURL -X POST -o - $CHISELD_HOST/dev/take_filter
# CHECK: {"simple_take":["x",1],"filter_take":["z",3]}

