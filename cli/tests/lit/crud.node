# SPDX-FileCopyrightText: Â© 2022 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cp examples/person.ts "$TEMPDIR/models"

cat << EOF > "$TEMPDIR/endpoints/persons.ts"
import { Person } from "../models/person";
export default Person.crud();
EOF

cd "$TEMPDIR"
$CHISEL apply
# CHECK: Model defined: Person
# CHECK: End point defined: /dev/persons

$CURL -d '{"first_name":"Alice","last_name":"Anderson","age":30,"human":true,"height":10}' $CHISELD_HOST/dev/persons
# CHECK: HTTP/1.1 200 OK
# CHECK: "Anderson"
$CURL -d '{"first_name":"Bob","last_name":"Brown","age":40,"human":true,"height":9}' $CHISELD_HOST/dev/persons
# CHECK: HTTP/1.1 200 OK
# CHECK: "Brown"
$CURL -d '{"first_name":"Charlie","last_name":"Chong","age":20,"human":true,"height":8}' $CHISELD_HOST/dev/persons
# CHECK: HTTP/1.1 200 OK
# CHECK: "Chong"
$CURL -d '{"first_name":"Dawn","last_name":"Draper","age":10,"human":true,"height":7}' $CHISELD_HOST/dev/persons
# CHECK: HTTP/1.1 200 OK
# CHECK: "Draper"
$CURL -d '{"first_name":"Eve","last_name":"Elgin","age":50,"human":true,"height":6}' $CHISELD_HOST/dev/persons
# CHECK: HTTP/1.1 200 OK
# CHECK: "Elgin"

$CURL $CHISELD_HOST/dev/persons | tr , \\n | sort # GET all
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Brown"
# CHECK: "last_name": "Chong"
# CHECK: "last_name": "Draper"
# CHECK: "last_name": "Elgin"

$CURL "$CHISELD_HOST/dev/persons?sort=first_name"
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Brown"
# CHECK: "last_name": "Chong"
# CHECK: "last_name": "Draper"
# CHECK: "last_name": "Elgin"

$CURL "$CHISELD_HOST/dev/persons?sort=%2Blast_name"
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Brown"
# CHECK: "last_name": "Chong"
# CHECK: "last_name": "Draper"
# CHECK: "last_name": "Elgin"

$CURL "$CHISELD_HOST/dev/persons?sort=-age"
# CHECK: "last_name": "Elgin"
# CHECK: "last_name": "Brown"
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Chong"
# CHECK: "last_name": "Draper"

count_results () {
    results=$(cat)
    printf "$results" \
        | grep -o "last_name" \
        | wc -l \
        | xargs printf 'Number of names: %d\n';
    printf "$results";
}

$CURL "$CHISELD_HOST/dev/persons?sort=first_name&limit=3" | count_results
# CHECK: Number of names: 3
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Brown"
# CHECK: "last_name": "Chong"

$CURL "$CHISELD_HOST/dev/persons?sort=-first_name&limit=3" | count_results
# CHECK: Number of names: 3
# CHECK: "last_name": "Elgin"
# CHECK: "last_name": "Draper"
# CHECK: "last_name": "Chong"

$CURL "$CHISELD_HOST/dev/persons?sort=first_name&offset=3" | count_results
# CHECK: Number of names: 2
# CHECK: HTTP/1.1 200 OK
# CHECK: "last_name": "Draper"
# CHECK: "last_name": "Elgin"

$CURL "$CHISELD_HOST/dev/persons?sort=-first_name&offset=3" | count_results
# CHECK: Number of names: 2
# CHECK: HTTP/1.1 200 OK
# CHECK: "last_name": "Brown"
# CHECK: "last_name": "Anderson"

## Ordering of operators doesn't matter, first sort gets ignored:
$CURL "$CHISELD_HOST/dev/persons?sort=first_name&limit=3&sort=-first_name&offset=1" | count_results
# CHECK: Number of names: 3
# CHECK: "last_name": "Draper"
# CHECK: "last_name": "Chong"
# CHECK: "last_name": "Brown"

$CURL "$CHISELD_HOST/dev/persons?sort=first_name&limit=2&offset=2" | count_results
# CHECK: Number of names: 2
# CHECK: "last_name": "Chong"
# CHECK: "last_name": "Draper"


## Test filtering

$CURL "$CHISELD_HOST/dev/persons?.last_name=Brown" | count_results
# CHECK: Number of names: 1
# CHECK: HTTP/1.1 200 OK
# CHECK: "last_name": "Brown"

$CURL "$CHISELD_HOST/dev/persons?.age=50" | count_results
# CHECK: Number of names: 1
# CHECK: HTTP/1.1 200 OK
# CHECK: "last_name": "Elgin"

$CURL "$CHISELD_HOST/dev/persons?.human=true" | count_results
# CHECK: Number of names: 5

$CURL "$CHISELD_HOST/dev/persons?.human=false" | count_results
# CHECK: HTTP/1.1 200 OK
# CHECK: Number of names: 0

$CURL "$CHISELD_HOST/dev/persons?.human=true&.height=7" | count_results
# CHECK: Number of names: 1
# CHECK: HTTP/1.1 200 OK
# CHECK: "last_name": "Draper"

$CURL "$CHISELD_HOST/dev/persons?sort=last_name&.age~lte=30&.height~gte=8" | count_results
# CHECK: Number of names: 2
# CHECK: HTTP/1.1 200 OK
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Chong"

## Filters all whose last name ends with `n`.
$CURL "$CHISELD_HOST/dev/persons?sort=last_name&.last_name~like=%25n" | count_results
# CHECK: Number of names: 3
# CHECK: HTTP/1.1 200 OK
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Brown"
# CHECK: "last_name": "Elgin"

id=`$CURL "$CHISELD_HOST/dev/persons?.age=10" | sed -ne 's/.*"id":[[:space:]]*"\([^"]*\).*/\1/p'`
$CURL $CHISELD_HOST/dev/persons/$id # GET by id
# CHECK: HTTP/1.1 200 OK
# CHECK: "first_name": "Dawn"
$CURL $CHISELD_HOST/dev/persons/i-will-never-exist-ya-know # GET by invalid id
# CHECK: HTTP/1.1 404 Not Found

$CURL -X DELETE $CHISELD_HOST/dev/persons/$id # DELETE by id
# CHECK: HTTP/1.1 200 OK
# CHECK: Deleted ID
$CURL $CHISELD_HOST/dev/persons/$id
# CHECK: HTTP/1.1 404 Not Found
# CHECK: Not found
$CURL "$CHISELD_HOST/dev/persons?.age=10"
# CHECK: HTTP/1.1 200 OK
# CHECK: []

## Test deletion with filter

$CURL -X DELETE "$CHISELD_HOST/dev/persons?.age=40" # Filtered DELETE
# CHECK: HTTP/1.1 200 OK
# CHECK: Deleted entities matching ?.age=40
$CURL $CHISELD_HOST/dev/persons | tr , \\n | sort
# CHECK: "last_name": "Anderson"
# CHECK: "last_name": "Chong"
# CHECK: "last_name": "Elgin"

$CURL -X DELETE "$CHISELD_HOST/dev/persons?all=true" # DELETE all
# CHECK: HTTP/1.1 200 OK
# CHECK: Deleted entities matching ?all=true
$CURL $CHISELD_HOST/dev/persons
# CHECK: HTTP/1.1 200 OK
# CHECK: []

$CURL -d '{"id":"abcd","first_name":"Alice"}' $CHISELD_HOST/dev/persons
# CHECK: HTTP/1.1 200 OK
# CHECK: "first_name": "Alice"
$CURL -d '{"id":"abcd","first_name":"Alice"}' $CHISELD_HOST/dev/persons # Repeated POST of the same entry.
# CHECK: HTTP/1.1 200 OK
# CHECK: "first_name": "Alice"
echo there are `$CURL $CHISELD_HOST/dev/persons | tr , \\\n | grep -c first_name` entries
# CHECK: there are 2 entries
$CURL $CHISELD_HOST/dev/persons | tr , \\n | grep first_name
# CHECK: "first_name": "Alice"
# CHECK: "first_name": "Alice"

$CURL -X DELETE "$CHISELD_HOST/dev/persons?all=true"
# CHECK: HTTP/1.1 200 OK
# CHECK: Deleted entities matching ?all=true

$CURL -X PUT -d '{"age":98422}' $CHISELD_HOST/dev/persons/cef5d492-d7e3-4c45-9a55-5929b9ab8292
# CHECK: HTTP/1.1 200 OK
# CHECK: "age": 98422
$CURL -X PUT -d '{"age":2938}' $CHISELD_HOST/dev/persons/cef5d492-d7e3-4c45-9a55-5929b9ab8292 # Repeated PUT of the same id.
# CHECK: HTTP/1.1 200 OK
# CHECK: "age": 2938
echo there is just `$CURL $CHISELD_HOST/dev/persons | tr , \\n | grep -c age\":` entry
# CHECK: there is just 1 entry
$CURL $CHISELD_HOST/dev/persons | tr , \\n | grep age\":
# CHECK: "age": 2938

$CURL -X PUT -d '{"age":98422}' $CHISELD_HOST/dev/persons/ # PUT without ID.
# CHECK: 400 Bad Request
# CHECK: PUT requires item ID in the URL
