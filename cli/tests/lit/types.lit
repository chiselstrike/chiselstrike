# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cd "$TEMPDIR"

cat << EOF > "$TEMPDIR/types/types.ts"
class Foo { a?: string; }
class Bar { a: string = "default"; }
EOF
$CHISEL apply

# CHECK: Type defined: Foo
# CHECK: Type defined: Bar

$CHISEL restart
$CHISEL type export

# CHECK: class Bar {
# CHECK:   [[^ *a: string = "default"]]
# CHECK: }
# CHECK: class Foo {
# CHECK:   [[^ *a\?: string]]
# CHECK: }

cat << EOF > "$TEMPDIR/types/types.ts"
class Bar { a: string = "default"; }
EOF
set +e
$CHISEL apply 2>&1
# CHECK: Trying to remove types from type file. This will delete the underlying data associated with this type. To proceed, apply again with --allow-type-deletion

cat << EOF > "$TEMPDIR/types/types.ts"
class Zed { a: string; a: string; }
EOF
set +e
$CHISEL apply --allow-type-deletion 2>&1
set -e

# CHECK: UNIQUE constraint failed: field_names.field_name
#
cat << EOF > "$TEMPDIR/types/types.ts"
class Bad { a: SomeType; }
EOF
set +e
$CHISEL apply --allow-type-deletion 2>&1
set -e

# CHECK: field a in class Bad neither a basic type, nor refers to a type defined in this context

cat << EOF > "$TEMPDIR/types/types.ts"
class Malformed { name: string(); }
EOF
$CHISEL apply --allow-type-deletion 2>&1 || echo
# CHECK: 1 | class Malformed { name: string(); }

cat << EOF > "$TEMPDIR/types/types.ts"
class Malformed { name; }
EOF
$CHISEL apply --allow-type-deletion 2>&1 || echo
# CHECK: 1 | class Malformed { name; }
