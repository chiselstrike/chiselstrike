# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/endpoints/test1.js"
export default async function chisel(req: Request) {
    let res = Deno.core.resources();
    if (res[3] !== "chisel_server::deno::BodyResource") {
        throw "Missing resource";
    }
    let body = await req.text();
    if (body != "foobar") {
       throw "Wrong body";
    }
    res = Deno.core.resources();
    if (res[3] !== undefined) {
       throw "Body resource was not released";
    }
    return new Response("test1 is ok");
}
EOF

cat << EOF > "$TEMPDIR/endpoints/test2.js"
export default async function chisel(req: Request) {
    let res = Deno.core.resources();
    if (res[4] !== "chisel_server::deno::BodyResource") {
        throw "Missing resource";
    }
    await req.body.cancel();
    res = Deno.core.resources();
    if (res[4] !== undefined) {
       throw "Body resource was not released";
    }
    return new Response("test2 is ok");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

# CHECK: End point defined: /dev/test1
# CHECK: End point defined: /dev/test2

$CURL --data foobar -o - $CHISELD_HOST/dev/test1

echo

# CHECK: HTTP/1.1 200 OK
# CHECK: test1 is ok


$CURL --data foobar -o - $CHISELD_HOST/dev/test2

# CHECK: HTTP/1.1 200 OK
# CHECK: test2 is ok
