# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cd "$TEMPDIR"


cat << EOF > "$TEMPDIR/models/types.ts"
export class Biography extends Chisel.ChiselEntity {
    title: string = "";
}

export class Person extends Chisel.ChiselEntity {
    name: string = "bob";
    age: number = 0;
    biography: Biography;
}
EOF

cat << EOF > "$TEMPDIR/endpoints/store.ts"
import { Person, Biography } from "../models/types.ts";

export default async function chisel(req: Request) {
    const glauber = Person.build({
        name: "Glauber",
        age: 89,
        biography: Biography.build({
            title: "My life with elephants"
        })
    });
    await glauber.save();

    const pekka = Person.build({
        name: "Pekka",
        age: 144,
        biography: Biography.build({
            title: "How sports didn't affect my life"
        })
    });
    await pekka.save();

    const jan = Person.build({
        name: "Jan",
        age: 144,
        biography: Biography.build({
            title: "The importance of being erinaceous"
        })
    });
    await jan.save();

    return new Response("Ok");
}
EOF

cat << EOF > "$TEMPDIR/endpoints/findall.ts"
import { Person } from "../models/types.ts";

function reverse(s: string): string {
    return [...s].reverse().join("");
}

/// Computes the n-th number of fibonacci sequence using golden ratio.
function fib(n: number) {
    let phi = (1 + Math.sqrt(5))/2;
    let a = Math.pow(phi, n) / Math.sqrt(5);
    return Math.round(a);
}

export default async function chisel(req: Request) {
    const url = new URL(req.url);

    const name = url.searchParams.get("name") ?? undefined;
    const reversedName = url.searchParams.get("reversedName") ?? undefined;
    const fiboAge = url.searchParams.get("fibonacciAge") ?? undefined;

    const filtered = Person.cursor()
        .sortBy("name")
        .filter((p: Person) => {
            if (name !== undefined) {
                return p.name == name;
            } else if (reversedName !== undefined) {
                return reverse(p.name) == reversedName;
            } else if (fiboAge !== undefined) {
                return fib(Number(fiboAge)) == p.age;
            } else {
                throw new Error("No parameter");
            }
        });

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF


cd "$TEMPDIR"
$CHISEL apply

# CHECK: Model defined: Person
# CHECK: End point defined: /dev/findall

$CHISEL apply
$CURL -X POST -o - $CHISELD_HOST/dev/store
# CHECK: Ok

$CURL -o - $CHISELD_HOST/dev/findall?name="Glauber"
# CHECK: [Glauber]

$CURL -o - $CHISELD_HOST/dev/findall?name="Pekka"
# CHECK: [Pekka]

$CURL -o - $CHISELD_HOST/dev/findall?name="Jan"
# CHECK: [Jan]

$CURL -o - $CHISELD_HOST/dev/findall?name="123"
# CHECK: []

## Try filtering using non-trivial functions
$CURL -o - $CHISELD_HOST/dev/findall?reversedName="rebualG"
# CHECK: [Glauber]

$CURL -o - $CHISELD_HOST/dev/findall?reversedName="akkeP"
# CHECK: [Pekka]

## Try filtering using mathematical function.
$CURL -o - $CHISELD_HOST/dev/findall?fibonacciAge=11
# CHECK: [Glauber]

$CURL -o - $CHISELD_HOST/dev/findall?fibonacciAge=12
# CHECK: [Jan, Pekka]



## Check that take gets applied after filtering with predicate.

cat << EOF > "$TEMPDIR/endpoints/filter_and_take.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .sortBy("name")
        .filter((p: Person) => {
            return p.name == "Glauber" || p.name == "Pekka";
        })
        .take(1);

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_and_take
# CHECK: [Glauber]



## Filter after take

cat << EOF > "$TEMPDIR/endpoints/filter_and_take.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .take(2)
        .filter((p: Person) => {
            return p.name == "Glauber";
        });

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_and_take
# CHECK: [Glauber]



## Check that restriction gets applied after filtering with predicate.

cat << EOF > "$TEMPDIR/endpoints/filter_and_restrict.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .filter((p: Person) => {
            return p.name == "Pekka" || p.name == "Jan";
        })
        .filter({"name": "Pekka"});

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_and_restrict
# CHECK: [Pekka]



## Filter after restriction

cat << EOF > "$TEMPDIR/endpoints/filter_and_restrict.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .filter({"age": 144})
        .filter((p: Person) => {
            return p.name == "Pekka";
        });

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_and_restrict
# CHECK: [Pekka]



## Check that column selection gets applied after filtering with predicate.

cat << EOF > "$TEMPDIR/endpoints/filter_and_select.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor().filter((p: Person) => {
       return p.name == "Glauber";
    }).select("age");

    const results = (await filtered.toArray()).map(p => JSON.stringify(p));
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_and_select
# CHECK: [{"age":89}]



## Filter after select

cat << EOF > "$TEMPDIR/endpoints/filter_and_select.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .select("age")
        .filter((p) => {
            return p.age == 89;
        });

    const results = (await filtered.toArray()).map(p => JSON.stringify(p));
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_and_select
# CHECK: [{"age":89}]



## Filter with expression - simple

cat << EOF > "$TEMPDIR/endpoints/filter_with_expression.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .__filter((p) => {
            return p.age == 89;
        }, {
            exprType: "Binary",
            left: {
              exprType: "Property",
              property: "age",
              object: {
                exprType: "Parameter",
                position: 0
              }
            },
            op: "Eq",
            right: {
              exprType: "Literal",
              value: 89
            }
        });

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_with_expression
# CHECK: [Glauber]


## Filter with expression - nested Entities

cat << EOF > "$TEMPDIR/endpoints/filter_with_expression.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .__filter((p) => {
            return p.biography.title == "The importance of being erinaceous";
        }, {
            exprType: "Binary",
            left: {
              exprType: "Property",
              property: "title",
              object: {
                exprType: "Property",
                property: "biography",
                object: {
                  exprType: "Parameter",
                  position: 0
                }
              }
            },
            op: "Eq",
            right: {
              exprType: "Literal",
              value: "The importance of being erinaceous"
            }
        });

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_with_expression
# CHECK: [Jan]


## Filter by nonexistent field - check for errors

cat << EOF > "$TEMPDIR/endpoints/filter_with_expression.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .__filter((p) => {
            return p.age == 89;
        }, {
            exprType: "Binary",
            left: {
              exprType: "Property",
              property: "nonexistent",
              object: {
                exprType: "Parameter",
                position: 0
              }
            },
            op: "Eq",
            right: {
              exprType: "Literal",
              value: 89
            }
        });

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_with_expression
# CHECK: expression error: entity 'Person' doesn't have field 'nonexistent'


## Filter by nonexistent joined field - check for errors

cat << EOF > "$TEMPDIR/endpoints/filter_with_expression.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const filtered = Person.cursor()
        .__filter((p) => {
            return p.biography.title == "The importance of being erinaceous";
        }, {
            exprType: "Binary",
            left: {
              exprType: "Property",
              property: "something_else",
              object: {
                exprType: "Property",
                property: "biography",
                object: {
                  exprType: "Parameter",
                  position: 0
                }
              }
            },
            op: "Eq",
            right: {
              exprType: "Literal",
              value: "The importance of being erinaceous"
            }
        });

    const results = (await filtered.toArray()).map(p => p.name);
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_with_expression
# CHECK: expression error: entity 'Biography' doesn't have field 'something_else'


## Filter by unary boolean predicate.

cat << EOF > "$TEMPDIR/endpoints/filter_with_expression.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const url = new URL(req.url);
    const all = url.searchParams.get("return_all") == "true";
    console.log(url.searchParams.get("return_all"), all);
    const filtered = Person.cursor()
        .__filter((p) => {
            return all;
        }, {
            exprType: "Literal",
            value: all
        });

    const results = (await filtered.toArray()).map(p => p.name).sort();
    return new Response("[" + results.join(", ") + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/filter_with_expression?return_all=true
# CHECK: [Glauber, Jan, Pekka]

$CURL -o - $CHISELD_HOST/dev/filter_with_expression?return_all=false
# CHECK: []
