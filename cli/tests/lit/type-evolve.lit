# SPDX-FileCopyrightText: Â© 2021-2022 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cd "$TEMPDIR"
cat << EOF > "$TEMPDIR/types/types.ts"
export class Evolving extends ChiselEntity { a: string; }
EOF
$CHISEL apply
# CHECK: Type defined: Evolving

cat << EOF > "$TEMPDIR/types/types.ts"
export class Evolving extends ChiselEntity { a: string; b: string = "with_default"; }
EOF
$CHISEL apply
# CHECK: Type defined: Evolving

cat << EOF > "$TEMPDIR/endpoints/store.ts"
export default async function chisel(req: Request) {
   await Chisel.save('Evolving', { "a": "A", "b": "B" });
   return new Response('ok');
}
EOF

cat << EOF > "$TEMPDIR/endpoints/find.ts"
export default async function chisel(req: Request) {
   let response = "tst ";
   for await (let ev of Evolving.all()) {
        let fields = [ev.a, ev.b];
        response += fields.join(" ");
        response += " ";
   }
   response += "tst";
   return new Response(response);
}
EOF

$CHISEL apply
# CHECK: Type defined: Evolving
# CHECK: End point defined: /dev/find
# CHECK: End point defined: /dev/store

$CURL -X POST $CHISELD_HOST/dev/store
# CHECK: HTTP/1.1 200 OK

$CHISEL restart

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: tst A B tst

cat << EOF > "$TEMPDIR/types/types.ts"
export class Evolving extends ChiselEntity { a: string; }
EOF
$CHISEL apply
# CHECK: Type defined: Evolving

$CURL $CHISELD_HOST/dev/find
# CHECK: HTTP/1.1 200 OK
# CHECK: tst A  tst
