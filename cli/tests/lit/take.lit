# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cd "$TEMPDIR"

cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity } from "@chiselstrike/chiselstrike";

export class Person extends ChiselEntity { name: string; company: string = "ChiselStrike"; }
EOF

cat << EOF > "$TEMPDIR/endpoints/store.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    const glauber = new Person();
    glauber.name = "Glauber";
    await glauber.save();

    const pekka = new Person();
    pekka.name = "Pekka";
    await pekka.save();
    return new Response("Ok");
}
EOF

cat << EOF > "$TEMPDIR/endpoints/findall.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "begin";
    for await (let p of Person.cursor()) {
        response += p.name
    }
    response += "end";
    return new Response(response);
}
EOF

cat << EOF > "$TEMPDIR/endpoints/findtake.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "begin";
    for await (let p of Person.cursor().take(1)) {
        response += p.name
    }
    response += "end";
    return new Response(response);
}
EOF

cat << EOF > "$TEMPDIR/endpoints/taketwice.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "begin";
    for await (let p of Person.cursor().take(4).take(1)) {
        response += p.name
    }
    response += "end";
    return new Response(response);
}
EOF

cat << EOF > "$TEMPDIR/endpoints/taketwicereverse.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "begin";
    for await (let p of Person.cursor().take(1).take(4)) {
        response += p.name
    }
    response += "end";
    return new Response(response);
}
EOF

cat << EOF > "$TEMPDIR/endpoints/takecopies.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "begin";
    let base = Person.cursor();

    let first = base.take(2);

    for await (let p of base.take(1)) {
        response += p.name
    }
    for await (let p of first) {
        response += p.name
    }
    response += "end";
    return new Response(response);
}
EOF


cat << EOF > "$TEMPDIR/endpoints/findfilter.ts"
import { Person } from "../models/types.ts";

export default async function chisel(req: Request) {
    let response = "begin";
    for await (let p of Person.cursor().filter({"company" : "ChiselStrike"}).take(1)) {
        response += p.name
    }
    response += "end";
    return new Response(response);
}
EOF

$CHISEL apply

# CHECK: Type defined: Person
# CHECK: End point defined: /dev/findall
# CHECK: End point defined: /dev/findfilter
# CHECK: End point defined: /dev/findtake
# CHECK: End point defined: /dev/store
# CHECK: End point defined: /dev/takecopies
# CHECK: End point defined: /dev/taketwice
# CHECK: End point defined: /dev/taketwicereverse

$CURL -X POST $CHISELD_HOST/dev/store
# CHECK: Ok

$CURL $CHISELD_HOST/dev/findall
# CHECK: beginGlauberPekkaend

$CURL $CHISELD_HOST/dev/findtake
# CHECK: beginGlauberend

$CURL $CHISELD_HOST/dev/findfilter
# CHECK: beginGlauberend

$CURL $CHISELD_HOST/dev/taketwice
# CHECK: beginGlauberend

$CURL $CHISELD_HOST/dev/taketwicereverse
# CHECK: beginGlauberend

$CURL $CHISELD_HOST/dev/takecopies
# CHECK: beginGlauberGlauberPekkaend
