# SPDX-FileCopyrightText: Â© 2021-2022 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/types/types.ts"
export class Foo extends ChiselEntity {
	a: string = "dfl1";
	b: number = 0.0;
	c: boolean = false;
	d: number = 2;
	e: string = "dfl2";
}
EOF

cat << EOF > "$TEMPDIR/endpoints/default.ts"
export default async function chisel(req: Request) {
    await Chisel.save('Foo', { "e": "value" });
    return new Response('ok');
}
EOF

cat << EOF > "$TEMPDIR/endpoints/read.ts"
export default async function chisel(req: Request) {
    let response = "";
    for await (let f of Foo.all()) {
        let fields = [f.a, f.b, f.c, f.d, f.e];
        response += fields.join(" ");
        response += " ";
    }
    return new Response(response);
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -X POST $CHISELD_HOST/dev/default
# CHECK: HTTP/1.1 200 OK

$CURL -o - $CHISELD_HOST/dev/read
# CHECK: HTTP/1.1 200 OK
# CHECK: dfl1 0 false 2 value

cat << EOF > "$TEMPDIR/types/types.ts"
export class Foo extends ChiselEntity {
	a: string = "dfl1";
	b: number = 0.0;
	c: boolean = false;
	d: number = 2;
	e: string = "dfl2";
	nfs: string = "oldval";
	nfb: number = 2;
	nfn: number = 2.2;
}
EOF

cat << EOF > "$TEMPDIR/endpoints/readold.ts"
export default async function chisel(req: Request) {
    let response = "";
    for await (let f of Foo.all()) {
        let fields = [f.a, f.b, f.c, f.d, f.e, f.nfs, f.nfb, f.nfn];
        response += fields.join(" ");
        response += " ";
    }
    return new Response(response);
}
EOF

cd "$TEMPDIR"
$CHISEL apply

$CURL -o - $CHISELD_HOST/dev/readold
# CHECK: HTTP/1.1 200 OK
# CHECK: dfl1 0 false 2 value oldval 2 2.2
