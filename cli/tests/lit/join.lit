# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/policies/pol.yaml"
labels:
  - name: pii
    transform: anonymize
EOF


cat << EOF > "$TEMPDIR/models/types.ts"
import { ChiselEntity, labels } from "@chiselstrike/api";

export class Person extends ChiselEntity {
    first_name: string = "";
    @labels("pii") last_name: string = "";
}
export class Nickname extends ChiselEntity {
   first_name: string = "";
   nick: string = "";
}
export class Comment extends ChiselEntity {
    text: string = "";
    author_first_name: string = "";
}
EOF

cat << EOF > "$TEMPDIR/endpoints/store_data.js"
import { Person, Nickname, Comment } from "../models/types.ts";

export default async function chisel(req: Request) {
    const person = new Person();
    person.first_name = "Glauber",
    person.last_name = "Costa",
    await person.save();

    const nick = new Nickname();
    nick.first_name = "Glauber";
    nick.nick = "Glommer";
    await nick.save();

    const comment = new Comment();
    comment.text = "This is the best text in the world.";
    comment.author_first_name = "Glauber";
    await comment.save();

    return new Response('ok');
}
EOF

cat << EOF > "$TEMPDIR/endpoints/query.ts"
import { Person, Nickname, Comment } from "../models/types.ts";

export default async function chisel(req: Request) {
    let ret = "[";
    const glaubers = Person.every()
        .filter(p => p.first_name == "Glauber")
        .join("first_name", Nickname, "first_name");

    for await (const [person, nick] of glaubers) {
        const r = [person.first_name, nick.nick, person.last_name].join(", ");
        ret += "(" + r + ") ";
    }
    return new Response(ret + "]");
}
EOF

cat << EOF > "$TEMPDIR/endpoints/multijoin.ts"
import { Person, Nickname, Comment } from "../models/types.ts";

export default async function chisel(req: Request) {
    let ret = "[";
    const comments = Comment.every()
        .join("author_first_name", Person, "first_name")
        .filter((c, p) => p.first_name == "Glauber")
        .join(Person, "first_name", Nickname, "first_name");

    for await (const [comment, person, nick] of comments) {
        const r = [comment.text, person.first_name, person.last_name, nick.nick].join(", ");
        ret += "(" + r + ") ";
    }
    return new Response(ret + "]");
}
EOF

cd "$TEMPDIR"
$CHISEL apply

# CHECK: Model defined: Person
# CHECK: Model defined: Nickname
# CHECK: Model defined: Comment
# CHECK: End point defined: /dev/multijoin
# CHECK: End point defined: /dev/query
# CHECK: End point defined: /dev/store_data
# CHECK: Policy defined for label pii

$CURL -X POST $CHISELD_HOST/dev/store_data
# CHECK: ok

$CURL -o - $CHISELD_HOST/dev/query
# CHECK: HTTP/1.1 200 OK
# CHECK: [(Glauber, Glommer, xxxxx) ]

$CURL -o - $CHISELD_HOST/dev/multijoin
# CHECK: HTTP/1.1 200 OK
# CHECK: [(This is the best text in the world., Glauber, Costa, Glommer) ]
