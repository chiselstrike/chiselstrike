# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  @labels("L1") a: string;
  @labels("L2") b: number;
}
EOF

cd "$TEMPDIR"
$CHISEL apply
# CHECK: Model defined: Foo

## Identical definition is OK.
$CHISEL apply
# CHECK: Model defined: Foo

## Changing labels is OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string;
  @labels("L1") b: number;
}
EOF
$CHISEL apply
# CHECK: Model defined: Foo

# Adding default values is OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  @labels("L1") b: number;
}
EOF
$CHISEL apply
# CHECK: Model defined: Foo

## Two compatible definitions in different files are rejected.
cat << EOF > "$TEMPDIR/models/fooNoteADifferentFilenameHere.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  b: number;
}
EOF
$CHISEL apply 2>&1 || echo
# CHECK: Error: Model Foo defined twice
rm "$TEMPDIR/models/fooNoteADifferentFilenameHere.ts"

## Changing b's type is not OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  b: string;
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: unsafe to replace type: Foo

## Adding a field is not OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  a: string = "foo";
  b: number; 
  c: number;
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: unsafe to replace type: Foo

## Reordering fields is OK.
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  b: number;
  a: string = "foo";
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: Model defined: Foo

## Removing fields is OK if they previously had a default
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Foo extends ChiselEntity {
  b: number;
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: Model defined: Foo

## Redefining elemental types is not OK.
echo 'export class number extends ChiselEntity { a: number}' > "$TEMPDIR/models/foo.ts"
$CHISEL apply --allow-type-deletion 2>&1 || echo # (swallow the apply abort)
# CHECK: custom type expected, got `number` instead

### Removing fields is not OK if they didn't have a default
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Bar extends ChiselEntity {
  a: number;
  b: number;
}
EOF
$CHISEL apply --allow-type-deletion 2>&1 || echo # (swallow the apply abort)
# CHECK: Model defined: Bar
#
cat << EOF > "$TEMPDIR/models/foo.ts"
export class Bar extends ChiselEntity {
  b: number;
}
EOF
$CHISEL apply 2>&1 || echo # (swallow the apply abort)
# CHECK: unsafe to replace type: Bar

