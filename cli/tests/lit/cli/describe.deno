# SPDX-FileCopyrightText: Â© 2021 ChiselStrike <info@chiselstrike.com>

# RUN: sh -e @file

cd "$TEMPDIR"

cat << EOF > "$TEMPDIR/models/types.ts"
export class Foo extends Chisel.ChiselEntity { a: string; }
export class Bar extends Chisel.ChiselEntity { b: string; }
EOF

cat << EOF > "$TEMPDIR/endpoints/hello.ts"
import { Foo } from "../models/types.ts";

export default async function chisel(req: Request) {
    return new Response('ok');
}
EOF

cat << EOF > "$TEMPDIR/policies/policies.yml"
labels:
  - name: pii
    transform: anonymize
EOF

$CHISEL apply

# CHECK: Model defined: Foo
# CHECK: Model defined: Bar
# CHECK: End point defined: /dev/hello

$CHISEL describe

# CHECK: class Bar {
# CHECK:   [[^ *b: string]]
# CHECK: }
# CHECK: class Foo {
# CHECK:   [[^ *a: string]]
# CHECK: }
# CHECK: Endpoint: /dev/hello
# CHECK: Label policy: pii

echo "found $($CHISEL describe | grep Endpoint | wc -l) endpoints"
# CHECK: found 1 endpoints

## check that an endpoint-only scenario works
rm -rf "$TEMPDIR/models"
rm -rf "$TEMPDIR/policies"
cat << EOF > "$TEMPDIR/endpoints/hello.ts"
export default async function chisel(req: Request) {
    return new Response('ok');
}
EOF
$CHISEL apply --allow-type-deletion

$CHISEL describe
# CHECK Endpoint: /dev/hello

$CHISEL restart

$CHISEL describe
# CHECK Endpoint: /dev/hello
